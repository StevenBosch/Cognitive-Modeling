DM = add.encounter(DM, ticks, curtime)
# Calculate the reaction time based on a base penalty, the ticks count and the memory influence
#if (priorShort < 0.4) {
#  reactionTime = basePenalty - exp(-100/((ticks/4)^2)) * 220
#} else if (priorShort < 0.6) {
#  reactionTime = basePenalty - exp(-10/((ticks/4)^2)) * 220
#} else reactionTime = basePenalty - exp(-10/((ticks)^2)) * 220
# Calculate the reaction time based on a base Reaction time and the extra time depending
# on how "prepared" the subject is
if (priorShort < 0.35) {
reactionTime = baseRT + exp(-ticks^2.6/2400) * 150
} else if (priorShort < 0.55) {
reactionTime = baseRT + exp(-ticks^2/200) * 150
} else reactionTime = baseRT + exp(-ticks^0.5) * 150
# Update the current time with the reaction time and the standard interval
curtime = curtime + (reactionTime + 1500)/1000
# Store the trial
index = (group-1)*nrSubjects*nrBlocks*nrTrials + (subject-1)*nrBlocks*nrTrials + (block-1)*nrTrials + trial
subjectsData$group[index] = group
subjectsData$sub[index] = subject
subjectsData$block[index] = block
subjectsData$forePeriod[index] = distribution[trial]
subjectsData$reactionTime[index] = reactionTime
}
}
}
}
data = subjectsData
## Plot the data
brown <- "#8b4513";
red <- "#ff1100";
black <- "#000000";
brownT <- "#8b451322";
redT <- "#ff110022";
blackT <- "#00000022";
## ---
#par(mfrow=c(2,4))
par(mfrow=c(2,3))
plotDat <- with(data,aggregate(list(reactionTime=reactionTime),list(forePeriod=forePeriod, group=group, block=block),mean))
yrange <- range(plotDat$reactionTime)*c(.95,1.10)
xrange <- range(300, 1700)
for(block in 1:nrBlocks){
title = paste("Block ", block)
plotDatTemp = plotDat[plotDat$block==block,]
with(plotDatTemp[plotDatTemp$group==1,],plot(forePeriod,reactionTime,type="b",col=red,lwd=2, pch = 15, ylim=yrange,xlim=xrange,main=paste(title)))
with(plotDatTemp[plotDatTemp$group==2,],lines(forePeriod,reactionTime,type="b",col=black,lwd=2, pch = 17, ylim=yrange,xlim=xrange))
legend("topleft", legend = c("Group 1", "Group 2"), col = c("red", "black"), lwd=1,
pch=c(15,17))
#with(plotDatTemp[plotDatTemp$group==3,],lines(forePeriod,reactionTime,type="b",col=brown,lwd=2,ylim=yrange,xlim=xrange))
}
brown <- "#8b4513";
red <- "#ff1100";
black <- "#000000";
brownT <- "#8b451322";
redT <- "#ff110022";
blackT <- "#00000022";
## ---
#par(mfrow=c(2,4))
par(mfrow=c(2,3))
plotDat <- with(data,aggregate(list(reactionTime=reactionTime),list(forePeriod=forePeriod, group=group, block=block),mean))
yrange <- range(plotDat$reactionTime)*c(.95,1.10)
xrange <- range(300, 1700)
for(block in 1:nrBlocks){
title = paste("Block ", block)
plotDatTemp = plotDat[plotDat$block==block,]
with(plotDatTemp[plotDatTemp$group==1,],plot(forePeriod,reactionTime,type="b",col=red,lwd=2, pch = 15, ylim=yrange,xlim=xrange,main=paste(title), xlab = "Foreperiod (ms)", ylab = "Response time (ms)"))
with(plotDatTemp[plotDatTemp$group==2,],lines(forePeriod,reactionTime,type="b",col=black,lwd=2, pch = 17, ylim=yrange,xlim=xrange))
legend("topleft", legend = c("Group 1", "Group 2"), col = c("red", "black"), lwd=1,
pch=c(15,17))
#with(plotDatTemp[plotDatTemp$group==3,],lines(forePeriod,reactionTime,type="b",col=brown,lwd=2,ylim=yrange,xlim=xrange))
}
### Final assignment CogMod: modelling Los et. al's temporal preparation experiment. ###
# -------------------------------------------------------------------------------
source("DM-module.R", TRUE)
source("time.R", TRUE)
# Experiment setup parameters
nrGroups = 2     # The number of groups
nrSubjects = 32   # The number of 'subjects' per group
nrBlocks = 5      # Number of blocks
nrTrials = 120   # Number of trials per block
# Subject properties
baseRT = 320
# Foreperiod distributions
foreperiods = c(400, 800, 1200, 1600)
uniform = c(30, 30, 30, 30)
exp = c(64, 32, 16, 8)
antiExp = c(8, 16, 32, 64)
distributions = array(NA, c(nrGroups, nrBlocks))
# Distributions for 2 groups of 2 blocks
distributions[1,] = c("uni", "exp,", "exp", "uni", "uni")
distributions[2,] = c("uni", "anti-exp", "anti-exp", "uni", "uni")
# Distributions for 3 groups of 8 blocks
#distributions[1,] = c("uni", "exp,", "exp", "uni", "anti-exp", "uni", "anti_exp", "uni")
#distributions[2,] = c("uni", "anti-exp", "anti-exp", "uni", "exp", "uni", "exp", "uni")
#distributions[3,] = c("uni", "uni", "uni", "uni", "uni", "uni", "uni", "uni")
# Data storage
subjectsData = data.frame(group = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
sub = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
block = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
forePeriod = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
reactionTime = integer(nrGroups*nrSubjects*nrBlocks*nrTrials))
#--------------- The Los et al. experiment---------------#
for(group in 1:nrGroups){
for(subject in 1:nrSubjects){
# Create the declarative memory of the current subject
num.chunks = 35 # The max interval is 1600 ms, which amounts to 28-31 ticks, so 35 should be enough
max.num.encounters = 8 * 64 # If all blocks were exponential, this is the max
DM = create.dm(num.chunks,max.num.encounters)
# To store the activation values and prior probabilities per trial
activation = array(NA, dim=c(num.chunks))
priors = array(NA, dim=c(num.chunks))
curtime = 0
for(block in 1:nrBlocks){
# Create the right disribution of trials for this block
distribution = sample.int(nrTrials, nrTrials)
switch(distributions[group, block],
"uni"= {
lim400 = nrTrials/length(foreperiods)
lim800 = lim400*2
lim1200 = lim400*3
},
"exp"= {
lim400 = 64
lim800 = 96
lim1200 = 112
},
"anti-exp"= {
lim400 = 8
lim800 = 24
lim1200 = 56
}
)
distribution = replace(distribution, distribution<=lim400, 400)
distribution = replace(distribution, (distribution>lim400) & (distribution<=lim800), 800)
distribution = replace(distribution, (distribution>lim800) & (distribution<=lim1200), 1200)
distribution = replace(distribution, (distribution>lim400) & (distribution<=nrTrials), 1600)
for(trial in 1:nrTrials){
# Calculate activation values for all chunks that have encounters using the current time and the times the encounters took place
for(chunk in 1:num.chunks) {
if(!is.na(DM[chunk][1])) {
activation[chunk] = actr.B(DM[chunk,], curtime)
}
}
# Calculate the priors with the activations
activationSum = sum(exp(activation), na.rm = TRUE)
for(chunk in 1:num.chunks) {
priors[chunk] = exp(activation[chunk]) / activationSum
}
# Calculate the general probability of a short interval: every amount of ticks below 24 are counted as short
# So only the amount of ticks that corresponds to intervals of 400 and 800 ms.
priorShort = sum(priors[1:23], na.rm = TRUE)
# Count the number of ticks of this trial and add it to the DM
ticks = timeToTicks(distribution[trial])
curtime = curtime + distribution[trial]/1000
DM = add.encounter(DM, ticks, curtime)
# Calculate the reaction time based on a base Reaction time and extra time depending
# on how "prepared" the subject is
if (priorShort < 0.35) {
reactionTime = baseRT + exp(-ticks^2.6/2400) * 150
} else if (priorShort < 0.50) {
reactionTime = baseRT + exp(-ticks^2/200) * 150
} else reactionTime = baseRT + exp(-ticks^0.5) * 150
# Update the current time with the reaction time and the standard interval
curtime = curtime + (reactionTime + 1500)/1000
# Store the trial
index = (group-1)*nrSubjects*nrBlocks*nrTrials + (subject-1)*nrBlocks*nrTrials + (block-1)*nrTrials + trial
subjectsData$group[index] = group
subjectsData$sub[index] = subject
subjectsData$block[index] = block
subjectsData$forePeriod[index] = distribution[trial]
subjectsData$reactionTime[index] = reactionTime
}
}
}
}
data = subjectsData
## Plot the data
brown <- "#8b4513";
red <- "#ff1100";
black <- "#000000";
brownT <- "#8b451322";
redT <- "#ff110022";
blackT <- "#00000022";
## ---
#par(mfrow=c(2,4))
par(mfrow=c(2,3))
plotDat <- with(data,aggregate(list(reactionTime=reactionTime),list(forePeriod=forePeriod, group=group, block=block),mean))
yrange <- range(plotDat$reactionTime)*c(.95,1.10)
xrange <- range(300, 1700)
for(block in 1:nrBlocks){
title = paste("Block ", block)
plotDatTemp = plotDat[plotDat$block==block,]
with(plotDatTemp[plotDatTemp$group==1,],plot(forePeriod,reactionTime,type="b",col=red,lwd=2, pch = 15, ylim=yrange,xlim=xrange,main=paste(title), xlab = "Foreperiod (ms)", ylab = "Response time (ms)"))
with(plotDatTemp[plotDatTemp$group==2,],lines(forePeriod,reactionTime,type="b",col=black,lwd=2, pch = 17, ylim=yrange,xlim=xrange))
legend("topleft", legend = c("Group 1", "Group 2"), col = c("red", "black"), lwd=1,
pch=c(15,17))
#with(plotDatTemp[plotDatTemp$group==3,],lines(forePeriod,reactionTime,type="b",col=brown,lwd=2,ylim=yrange,xlim=xrange))
}
### Final assignment CogMod: modelling Los et. al's temporal preparation experiment. ###
# -------------------------------------------------------------------------------
source("DM-module.R", TRUE)
source("time.R", TRUE)
# Experiment setup parameters
nrGroups = 2     # The number of groups
nrSubjects = 32   # The number of 'subjects' per group
nrBlocks = 5      # Number of blocks
nrTrials = 120   # Number of trials per block
# Subject properties
baseRT = 320
# Foreperiod distributions
foreperiods = c(400, 800, 1200, 1600)
uniform = c(30, 30, 30, 30)
exp = c(64, 32, 16, 8)
antiExp = c(8, 16, 32, 64)
distributions = array(NA, c(nrGroups, nrBlocks))
# Distributions for 2 groups of 2 blocks
distributions[1,] = c("uni", "exp,", "exp", "uni", "uni")
distributions[2,] = c("uni", "anti-exp", "anti-exp", "uni", "uni")
# Distributions for 3 groups of 8 blocks
#distributions[1,] = c("uni", "exp,", "exp", "uni", "anti-exp", "uni", "anti_exp", "uni")
#distributions[2,] = c("uni", "anti-exp", "anti-exp", "uni", "exp", "uni", "exp", "uni")
#distributions[3,] = c("uni", "uni", "uni", "uni", "uni", "uni", "uni", "uni")
# Data storage
subjectsData = data.frame(group = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
sub = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
block = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
forePeriod = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
reactionTime = integer(nrGroups*nrSubjects*nrBlocks*nrTrials))
#--------------- The Los et al. experiment---------------#
for(group in 1:nrGroups){
for(subject in 1:nrSubjects){
# Create the declarative memory of the current subject
num.chunks = 35 # The max interval is 1600 ms, which amounts to 28-31 ticks, so 35 should be enough
max.num.encounters = 8 * 64 # If all blocks were exponential, this is the max
DM = create.dm(num.chunks,max.num.encounters)
# To store the activation values and prior probabilities per trial
activation = array(NA, dim=c(num.chunks))
priors = array(NA, dim=c(num.chunks))
curtime = 0
for(block in 1:nrBlocks){
# Create the right disribution of trials for this block
distribution = sample.int(nrTrials, nrTrials)
switch(distributions[group, block],
"uni"= {
lim400 = nrTrials/length(foreperiods)
lim800 = lim400*2
lim1200 = lim400*3
},
"exp"= {
lim400 = 64
lim800 = 96
lim1200 = 112
},
"anti-exp"= {
lim400 = 8
lim800 = 24
lim1200 = 56
}
)
distribution = replace(distribution, distribution<=lim400, 400)
distribution = replace(distribution, (distribution>lim400) & (distribution<=lim800), 800)
distribution = replace(distribution, (distribution>lim800) & (distribution<=lim1200), 1200)
distribution = replace(distribution, (distribution>lim400) & (distribution<=nrTrials), 1600)
for(trial in 1:nrTrials){
# Calculate activation values for all chunks that have encounters using the current time and the times the encounters took place
for(chunk in 1:num.chunks) {
if(!is.na(DM[chunk][1])) {
activation[chunk] = actr.B(DM[chunk,], curtime)
}
}
# Calculate the priors with the activations
activationSum = sum(exp(activation), na.rm = TRUE)
for(chunk in 1:num.chunks) {
priors[chunk] = exp(activation[chunk]) / activationSum
}
# Calculate the general probability of a short interval: every amount of ticks below 24 are counted as short
# So only the amount of ticks that corresponds to intervals of 400 and 800 ms.
priorShort = sum(priors[1:23], na.rm = TRUE)
# Count the number of ticks of this trial and add it to the DM
ticks = timeToTicks(distribution[trial])
curtime = curtime + distribution[trial]/1000
DM = add.encounter(DM, ticks, curtime)
# Calculate the reaction time based on a base Reaction time and extra time depending
# on how "prepared" the subject is
if (priorShort < 0.35) {
reactionTime = baseRT + exp(-ticks^2.6/2400) * 150
} else if (priorShort < 0.53) {
reactionTime = baseRT + exp(-ticks^2/200) * 150
} else reactionTime = baseRT + exp(-ticks^0.5) * 150
# Update the current time with the reaction time and the standard interval
curtime = curtime + (reactionTime + 1500)/1000
# Store the trial
index = (group-1)*nrSubjects*nrBlocks*nrTrials + (subject-1)*nrBlocks*nrTrials + (block-1)*nrTrials + trial
subjectsData$group[index] = group
subjectsData$sub[index] = subject
subjectsData$block[index] = block
subjectsData$forePeriod[index] = distribution[trial]
subjectsData$reactionTime[index] = reactionTime
}
}
}
}
data = subjectsData
## Plot the data
brown <- "#8b4513";
red <- "#ff1100";
black <- "#000000";
brownT <- "#8b451322";
redT <- "#ff110022";
blackT <- "#00000022";
## ---
#par(mfrow=c(2,4))
par(mfrow=c(2,3))
plotDat <- with(data,aggregate(list(reactionTime=reactionTime),list(forePeriod=forePeriod, group=group, block=block),mean))
yrange <- range(plotDat$reactionTime)*c(.95,1.10)
xrange <- range(300, 1700)
for(block in 1:nrBlocks){
title = paste("Block ", block)
plotDatTemp = plotDat[plotDat$block==block,]
with(plotDatTemp[plotDatTemp$group==1,],plot(forePeriod,reactionTime,type="b",col=red,lwd=2, pch = 15, ylim=yrange,xlim=xrange,main=paste(title), xlab = "Foreperiod (ms)", ylab = "Response time (ms)"))
with(plotDatTemp[plotDatTemp$group==2,],lines(forePeriod,reactionTime,type="b",col=black,lwd=2, pch = 17, ylim=yrange,xlim=xrange))
legend("topleft", legend = c("Group 1", "Group 2"), col = c("red", "black"), lwd=1,
pch=c(15,17))
#with(plotDatTemp[plotDatTemp$group==3,],lines(forePeriod,reactionTime,type="b",col=brown,lwd=2,ylim=yrange,xlim=xrange))
}
### Final assignment CogMod: modelling Los et. al's temporal preparation experiment. ###
# -------------------------------------------------------------------------------
source("DM-module.R", TRUE)
source("time.R", TRUE)
# Experiment setup parameters
nrGroups = 2     # The number of groups
nrSubjects = 32   # The number of 'subjects' per group
nrBlocks = 5      # Number of blocks
nrTrials = 120   # Number of trials per block
# Subject properties
baseRT = 320
# Foreperiod distributions
foreperiods = c(400, 800, 1200, 1600)
uniform = c(30, 30, 30, 30)
exp = c(64, 32, 16, 8)
antiExp = c(8, 16, 32, 64)
distributions = array(NA, c(nrGroups, nrBlocks))
# Distributions for 2 groups of 2 blocks
distributions[1,] = c("uni", "exp,", "exp", "uni", "uni")
distributions[2,] = c("uni", "anti-exp", "anti-exp", "uni", "uni")
# Distributions for 3 groups of 8 blocks
#distributions[1,] = c("uni", "exp,", "exp", "uni", "anti-exp", "uni", "anti_exp", "uni")
#distributions[2,] = c("uni", "anti-exp", "anti-exp", "uni", "exp", "uni", "exp", "uni")
#distributions[3,] = c("uni", "uni", "uni", "uni", "uni", "uni", "uni", "uni")
# Data storage
subjectsData = data.frame(group = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
sub = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
block = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
forePeriod = integer(nrGroups*nrSubjects*nrBlocks*nrTrials),
reactionTime = integer(nrGroups*nrSubjects*nrBlocks*nrTrials))
#--------------- The Los et al. experiment---------------#
for(group in 1:nrGroups){
for(subject in 1:nrSubjects){
# Create the declarative memory of the current subject
num.chunks = 35 # The max interval is 1600 ms, which amounts to 28-31 ticks, so 35 should be enough
max.num.encounters = 8 * 64 # If all blocks were exponential, this is the max
DM = create.dm(num.chunks,max.num.encounters)
# To store the activation values and prior probabilities per trial
activation = array(NA, dim=c(num.chunks))
priors = array(NA, dim=c(num.chunks))
curtime = 0
for(block in 1:nrBlocks){
# Create the right disribution of trials for this block
distribution = sample.int(nrTrials, nrTrials)
switch(distributions[group, block],
"uni"= {
lim400 = nrTrials/length(foreperiods)
lim800 = lim400*2
lim1200 = lim400*3
},
"exp"= {
lim400 = 64
lim800 = 96
lim1200 = 112
},
"anti-exp"= {
lim400 = 8
lim800 = 24
lim1200 = 56
}
)
distribution = replace(distribution, distribution<=lim400, 400)
distribution = replace(distribution, (distribution>lim400) & (distribution<=lim800), 800)
distribution = replace(distribution, (distribution>lim800) & (distribution<=lim1200), 1200)
distribution = replace(distribution, (distribution>lim400) & (distribution<=nrTrials), 1600)
for(trial in 1:nrTrials){
# Calculate activation values for all chunks that have encounters using the current time and the times the encounters took place
for(chunk in 1:num.chunks) {
if(!is.na(DM[chunk][1])) {
activation[chunk] = actr.B(DM[chunk,], curtime)
}
}
# Calculate the priors with the activations
activationSum = sum(exp(activation), na.rm = TRUE)
for(chunk in 1:num.chunks) {
priors[chunk] = exp(activation[chunk]) / activationSum
}
# Calculate the general probability of a short interval: every amount of ticks below 24 are counted as short
# So only the amount of ticks that corresponds to intervals of 400 and 800 ms.
priorShort = sum(priors[1:23], na.rm = TRUE)
# Count the number of ticks of this trial and add it to the DM
ticks = timeToTicks(distribution[trial])
curtime = curtime + distribution[trial]/1000
DM = add.encounter(DM, ticks, curtime)
# Calculate the reaction time based on a base Reaction time and extra time depending
# on how "prepared" the subject is
if (priorShort < 0.35) {
reactionTime = baseRT + exp(-ticks^2.6/2400) * 150
} else if (priorShort < 0.55) {
reactionTime = baseRT + exp(-ticks^2/200) * 150
} else reactionTime = baseRT + exp(-ticks^0.5) * 150
# Update the current time with the reaction time and the standard interval
curtime = curtime + (reactionTime + 1500)/1000
# Store the trial
index = (group-1)*nrSubjects*nrBlocks*nrTrials + (subject-1)*nrBlocks*nrTrials + (block-1)*nrTrials + trial
subjectsData$group[index] = group
subjectsData$sub[index] = subject
subjectsData$block[index] = block
subjectsData$forePeriod[index] = distribution[trial]
subjectsData$reactionTime[index] = reactionTime
}
}
}
}
data = subjectsData
## Plot the data
brown <- "#8b4513";
red <- "#ff1100";
black <- "#000000";
brownT <- "#8b451322";
redT <- "#ff110022";
blackT <- "#00000022";
## ---
#par(mfrow=c(2,4))
par(mfrow=c(2,3))
plotDat <- with(data,aggregate(list(reactionTime=reactionTime),list(forePeriod=forePeriod, group=group, block=block),mean))
yrange <- range(plotDat$reactionTime)*c(.95,1.10)
xrange <- range(300, 1700)
for(block in 1:nrBlocks){
title = paste("Block ", block)
plotDatTemp = plotDat[plotDat$block==block,]
with(plotDatTemp[plotDatTemp$group==1,],plot(forePeriod,reactionTime,type="b",col=red,lwd=2, pch = 15, ylim=yrange,xlim=xrange,main=paste(title), xlab = "Foreperiod (ms)", ylab = "Response time (ms)"))
with(plotDatTemp[plotDatTemp$group==2,],lines(forePeriod,reactionTime,type="b",col=black,lwd=2, pch = 17, ylim=yrange,xlim=xrange))
legend("topleft", legend = c("Group 1", "Group 2"), col = c("red", "black"), lwd=1,
pch=c(15,17))
#with(plotDatTemp[plotDatTemp$group==3,],lines(forePeriod,reactionTime,type="b",col=brown,lwd=2,ylim=yrange,xlim=xrange))
}
help(anova)
summary(plotDat)
help(aov)
help(anova)
anova(plotDat)
aov(plotDat)
anova(plotDat$forePeriod, plotDat$reactionTime)
aov(plotDat$reactionTime ~ plotDat$forePeriod)
aov(reactionTime ~ forePeriod, data=plotDat)
aov(reactionTime ~ forePeriod, data=data)
summary(aov(reactionTime ~ forePeriod, data=data))
summary(aov(reactionTime ~ group, data=data))
summary(aov(reactionTime ~ block, data=data))
plotDat
testDat = with(data,aggregate(list(reactionTime=reactionTime),list(block=block),mean))
testDat
testDat = with(data,aggregate(list(reactionTime=reactionTime),list(block=block)))
testDat = aggregate(reactionTime=reactionTime)
summary(aov(reactionTime[block==1] ~ block, data=data))
summary(aov(reactionTime[block==1] ~ forePeriod[block==1], data=data))
summary(aov(reactionTime[block==1] ~ forePeriod[block==1], data=data))
summary(aov(reactionTime[block==2] ~ forePeriod[block==2], data=data))
summary(aov(reactionTime[block==3] ~ forePeriod[block==3], data=data))
summary(aov(reactionTime[block==4] ~ forePeriod[block==4], data=data))
summary(aov(reactionTime[block==5] ~ forePeriod[block==5], data=data))
summary(aov(reactionTime[block==1] ~ group[block==1], data=data))
summary(aov(reactionTime[block==2] ~ group[block==2], data=data))
summary(aov(reactionTime[block==3] ~ group[block==3], data=data))
summary(aov(reactionTime[block==4] ~ group[block==4], data=data))
summary(aov(reactionTime[block==5] ~ group[block==5], data=data))
summary(aov(reactionTime[block==1] ~ forePeriod[block==1], data=data))
summary(aov(reactionTime[block==2] ~ forePeriod[block==2], data=data))
summary(aov(reactionTime[block==3] ~ forePeriod[block==3], data=data))
summary(aov(reactionTime[block==4] ~ forePeriod[block==4], data=data))
summary(aov(reactionTime[block==5] ~ forePeriod[block==5], data=data))
summary(aov(reactionTime[block==1] ~ forePeriod[block==1], data=data))
summary(aov(reactionTime[block==2] ~ forePeriod[block==2], data=data))
summary(aov(reactionTime[block==3] ~ forePeriod[block==3], data=data))
summary(aov(reactionTime[block==4] ~ forePeriod[block==4], data=data))
summary(aov(reactionTime[block==5] ~ forePeriod[block==5], data=data))
summary(aov(reactionTime[block==1] ~ forePeriod[block==1], data=data))
summary(aov(reactionTime[block==2] ~ forePeriod[block==2], data=data))
summary(aov(reactionTime[block==3] ~ forePeriod[block==3], data=data))
summary(aov(reactionTime[block==4] ~ forePeriod[block==4], data=data))
summary(aov(reactionTime[block==5] ~ forePeriod[block==5], data=data))
summary(aov(reactionTime[block==1] ~ group[block==1], data=data))
summary(aov(reactionTime[block==2] ~ group[block==2], data=data))
summary(aov(reactionTime[block==3] ~ group[block==3], data=data))
summary(aov(reactionTime[block==4] ~ group[block==4], data=data))
summary(aov(reactionTime[block==5] ~ group[block==5], data=data))
summary(aov(reactionTime[block==1] ~ group[block==1] + forePeriod[block==1], data=data))
summary(aov(reactionTime[block==2] ~ group[block==2] + forePeriod[block==2], data=data))
summary(aov(reactionTime[block==3] ~ group[block==3] + forePeriod[block==3], data=data))
summary(aov(reactionTime[block==4] ~ group[block==4] + forePeriod[block==4], data=data))
summary(aov(reactionTime[block==5] ~ group[block==5] + forePeriod[block==5], data=data))
summary(aov(reactionTime[block==1] ~ group[block==1] * forePeriod[block==1], data=data))
summary(aov(reactionTime[block==2] ~ group[block==2] * forePeriod[block==2], data=data))
summary(aov(reactionTime[block==3] ~ group[block==3] * forePeriod[block==3], data=data))
summary(aov(reactionTime[block==4] ~ group[block==4] * forePeriod[block==4], data=data))
summary(aov(reactionTime[block==5] ~ group[block==5] * forePeriod[block==5], data=data))
